diff --git a/CMakeLists.txt b/CMakeLists.txt
index f93ea2b2f..7750fc0f1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,10 +23,6 @@ include(Pcsx2Utils)
 check_no_parenthesis_in_path()
 detectOperatingSystem()
 check_compiler_version("7.0" "7.0")
-if(NOT MSVC)
-   set(CMAKE_C_COMPILER_LAUNCHER ccache)
-   set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
-endif()
 
 #-------------------------------------------------------------------------------
 # Include specific module
diff --git a/libretro/main.cpp b/libretro/main.cpp
index 131631158..f4e65e208 100644
--- a/libretro/main.cpp
+++ b/libretro/main.cpp
@@ -112,7 +112,7 @@ void retro_init(void)
 
 	const char* system = nullptr;
 	environ_cb(RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY, &system);
-	
+
 	const char* save_dir = nullptr;
 	environ_cb(RETRO_ENVIRONMENT_GET_SAVE_DIRECTORY, &save_dir);
 
@@ -128,11 +128,11 @@ void retro_init(void)
 	slot2_file = wxFileName(save_dir_root.GetPath(), "");
 	slot2_file.AppendDir("Slot 2");
 
-	
+
 	if (! save_dir_root.DirExists()) save_dir_root.Mkdir();
 	if (!slot1_file.DirExists()) slot1_file.Mkdir();
 	if (!slot2_file.DirExists()) slot2_file.Mkdir();
-	
+
 
 	// check if legacy memcards exists
 
@@ -170,7 +170,7 @@ void retro_init(void)
 				custom_memcard_list_slot1.push_back(name);
 			}
 		}
-		
+
 	}
 
 	// get other 'custom' memcards put by the user in the slot 2 folder, if any
@@ -204,8 +204,8 @@ void retro_init(void)
 	// Per game folders saves has been disabled because hangs while writing on disk
 	// and seems not working well on some games
 	for (retro_core_option_definition& def : option_defs)
-	{								
-		if (!def.key || strcmp(def.key, "pcsx2_memcard_slot_1")) continue; 
+	{
+		if (!def.key || strcmp(def.key, "pcsx2_memcard_slot_1")) continue;
 		size_t i = 0;
 		def.values[i++] = { "empty", "Empty" };
 		if (legacy_memcard1.FileExists())
@@ -229,7 +229,7 @@ void retro_init(void)
 
 	for (retro_core_option_definition& def : option_defs)
 	{
-		if (!def.key || strcmp(def.key, "pcsx2_memcard_slot_2")) continue; 
+		if (!def.key || strcmp(def.key, "pcsx2_memcard_slot_2")) continue;
 		size_t i = 0;
 		def.values[i++] = {"empty", "Empty"};
 		if (legacy_memcard2.FileExists())
@@ -260,12 +260,12 @@ void retro_init(void)
 	{
 			wxString description;
 			if (IsBIOS(bios_file, description)) {
-				std::string log_bios = (std::string)description;				
+				std::string log_bios = (std::string)description;
 				bios_files.push_back((std::string)bios_file);
 				bios_files.push_back((std::string)description);
 			}
 	}
-	
+
 
 	for (retro_core_option_definition& def : option_defs)
 	{
@@ -312,7 +312,7 @@ void retro_init(void)
 
 	if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_1, KeyOptionString::return_type), "shared8") == 0)
 	{
-		
+
 		slot1_file.SetName(FILENAME_SHARED_MEMCARD_8);
 		slot1_file.SetExt("ps2");
 		MemCardRetro::CreateSharedMemCardIfNotExisting(slot1_file, 8);
@@ -342,7 +342,7 @@ void retro_init(void)
 
 
 	// apply options to pcsx2
-	
+
 	g_Conf->EnablePresets = true;
 	g_Conf->BaseFilenames.Plugins[PluginId_GS] = "Built-in";
 	g_Conf->BaseFilenames.Plugins[PluginId_PAD] = "Built-in";
@@ -356,7 +356,7 @@ void retro_init(void)
 	g_Conf->EmuOptions.GS.FramesToSkip = option_value(INT_PCSX2_OPT_FRAMES_TO_SKIP, KeyOptionInt::return_type);
 	g_Conf->EmuOptions.GS.VsyncQueueSize = option_value(INT_PCSX2_OPT_VSYNC_MTGS_QUEUE, KeyOptionInt::return_type);
 	g_Conf->EmuOptions.EnableCheats = option_value(BOOL_PCSX2_OPT_ENABLE_CHEATS, KeyOptionBool::return_type);
-	
+
 
 	int clampMode = option_value(INT_PCSX2_OPT_CLAMPING_MODE, KeyOptionInt::return_type);
 	g_Conf->EmuOptions.Cpu.Recompiler.fpuOverflow = (clampMode >= 1);
@@ -597,7 +597,7 @@ bool retro_load_game(const struct retro_game_info* game)
 	}
 	else
 		log_cb(RETRO_LOG_INFO, "Loading selected BIOS:  %s\n", selected_bios);
-	
+
 
 	const char* system = nullptr;
 	environ_cb(RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY, &system);
@@ -613,12 +613,12 @@ bool retro_load_game(const struct retro_game_info* game)
 
 	if (game)
 	{
-		
+
 		LanguageInjector::Inject(
 			(std::string)option_value(STRING_PCSX2_OPT_BIOS, KeyOptionString::return_type),
 			option_value(STRING_PCSX2_OPT_SYSTEM_LANGUAGE, KeyOptionString::return_type)
 		);
-		
+
 
 
 		wxVector<wxString> game_paths;
@@ -656,12 +656,12 @@ bool retro_load_game(const struct retro_game_info* game)
 			pcsx2->SysExecute(CDVD_SourceType::NoDisc, game_paths[0]);
 		}
 		else
-		{	
-			
+		{
+
 			g_Conf->EmuOptions.UseBOOT2Injection = option_value(BOOL_PCSX2_OPT_FASTBOOT, KeyOptionBool::return_type);
 			g_Conf->CdvdSource = CDVD_SourceType::Iso;
 			g_Conf->CurrentIso = game_paths[0];
-			
+
 			// set up memcard on slot 1
 			if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_1, KeyOptionString::return_type), "empty") == 0)
 			{
@@ -683,7 +683,7 @@ bool retro_load_game(const struct retro_game_info* game)
 				g_Conf->Mcd[0].Filename = save_game_folder;
 
 			}
-			else if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_1, KeyOptionString::return_type), "shared8") == 0 
+			else if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_1, KeyOptionString::return_type), "shared8") == 0
 				|| strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_1, KeyOptionString::return_type), "shared32") == 0)
 			{
 				// Shared Memcards
@@ -715,14 +715,14 @@ bool retro_load_game(const struct retro_game_info* game)
 
 			// set up memcard on slot 2
 
-							
+
 			if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_2, KeyOptionString::return_type), "empty") == 0)
 			{
 				// slot empty
 				g_Conf->Mcd[1].Type = MemoryCardType::MemoryCard_None;
 				g_Conf->Mcd[1].Enabled = false;
 			}
-			else if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_2, KeyOptionString::return_type), "shared8") == 0 
+			else if (strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_2, KeyOptionString::return_type), "shared8") == 0
 				|| strcmp(option_value(STRING_PCSX2_OPT_MEMCARD_SLOT_2, KeyOptionString::return_type), "shared32") == 0)
 			{
 				// Shared Memcards
@@ -749,7 +749,7 @@ bool retro_load_game(const struct retro_game_info* game)
 
 			}
 
-	
+
 			if (!option_value(BOOL_PCSX2_OPT_BOOT_TO_BIOS, KeyOptionBool::return_type))
 			{
 				pcsx2->SysExecute(g_Conf->CdvdSource);
@@ -767,7 +767,7 @@ bool retro_load_game(const struct retro_game_info* game)
 
 			}
 		}
-		
+
 	}
 	else
 	{
@@ -790,7 +790,7 @@ bool retro_load_game(const struct retro_game_info* game)
 		option_value(INT_PCSX2_OPT_GAMEPAD_RUMBLE_FORCE, KeyOptionInt::return_type)
 		);
 
-	retro_hw_context_type context_type = RETRO_HW_CONTEXT_OPENGL;
+	retro_hw_context_type context_type = RETRO_HW_CONTEXT_OPENGL_CORE;
 	const char* option_renderer = option_value(STRING_PCSX2_OPT_RENDERER, KeyOptionString::return_type);
 	log_cb(RETRO_LOG_INFO, "options renderer: %s\n", option_renderer);
 
@@ -803,7 +803,11 @@ bool retro_load_game(const struct retro_game_info* game)
 	else if (!std::strcmp(option_renderer, "Null"))
 		context_type = RETRO_HW_CONTEXT_NONE;
 
-	return set_hw_render(context_type);
+	if (set_hw_render(context_type))
+		return true;
+	if (set_hw_render(RETRO_HW_CONTEXT_OPENGL_CORE))
+		return true;
+	return set_hw_render(RETRO_HW_CONTEXT_OPENGL);
 }
 
 bool retro_load_game_special(unsigned game_type, const struct retro_game_info* info,
